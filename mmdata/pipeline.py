# -*- coding: utf-8 -*-
##########################################################################
# NSAp - Copyright (C) CEA, 2022 - 2023
# Distributed under the terms of the CeCILL-B license, as published by
# the CEA-CNRS-INRIA. Refer to the LICENSE file or to
# http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
# for details.
##########################################################################

"""
Define pipeline compatible with DataFrame.
"""

# Imports
import inspect
from sklearn.pipeline import Pipeline


class PipelineDF(Pipeline):
    """ Use DataFrame as inputs.
    """
    def predict(self, X, y=None, **predict_params):
        """ Transform the data, and apply `predict` with the final estimator.

        Call `transform` of each transformer in the pipeline. The transformed
        data are finally passed to the final estimator that calls `predict`
        method. Only valid if the final estimator implements `predict`.

        Parameters
        ----------
        X: iterable
            data to predict on. Must fulfill input requirements of first step
            of the pipeline.
        y: DataFrame (n_sample, n_labels)
            additional variables.
        **predict_params : dict of string -> object
            parameters to the ``predict`` called at the end of all
            transformations in the pipeline. Note that while this may be
            used to return uncertainties from some models with return_std
            or return_cov, uncertainties that are generated by the
            transformations in the pipeline are not propagated to the
            final estimator.

        Returns
        -------
        y_pred : ndarray
            result of calling `predict` on the final estimator.
        """
        Xt = X
        for _, name, transform in self._iter(with_final=False):
            sig = inspect.signature(transform.transform)
            if "y" in sig.parameters:
                Xt = transform.transform(Xt, y)
            else:
                Xt = transform.transform(Xt)
        return self.steps[-1][1].predict(Xt, **predict_params)
